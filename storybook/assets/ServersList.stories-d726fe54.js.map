{"version":3,"file":"ServersList.stories-d726fe54.js","sources":["../../src/react/SelectGameVersion.tsx","../../node_modules/.pnpm/react-use@17.3.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-use/esm/misc/util.js","../../node_modules/.pnpm/react-use@17.3.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-use/esm/useMedia.js","../../src/react/simpleHooks.ts","../../src/react/AddServerOrConnect.tsx","../../src/react/ServersList.tsx"],"sourcesContent":["import React, { CSSProperties } from 'react'\nimport Select from './Select'\n\ntype Version = { value: string, label: string }\n\nexport default (\n  { versions, selected, onChange, updateOptions, containerStyle }:\n    {\n      versions: Version[],\n      selected?: Version,\n      onChange?: (newValue: string) => void,\n      updateOptions?: (newSel: string) => void,\n    } & Pick<React.ComponentProps<typeof Select>, 'containerStyle' | 'placeholder' | 'disabled'>\n) => {\n  return <Select\n    initialOptions={versions}\n    defaultValue={selected}\n    updateOptions={(newSel) => {\n      updateOptions?.(newSel)\n    }}\n    onValueChange={onChange}\n    containerStyle={containerStyle ?? { width: '190px' }}\n    getCssOnInput={(value) => {\n      if (!versions || !value) return {}\n      const parsedsupportedVersions = versions.map(x => x.value.split('.').map(Number))\n      const parsedValue = value.split('.').map(Number)\n\n      const compareVersions = (v1, v2) => {\n        for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\n          const num1 = v1[i] || 0\n          const num2 = v2[i] || 0\n          if (num1 > num2) return 1\n          if (num1 < num2) return -1\n        }\n        return 0\n      }\n\n      parsedsupportedVersions.sort(compareVersions)\n      const minVersion = parsedsupportedVersions[0]\n      const maxVersion = parsedsupportedVersions.at(-1)\n\n      const isWithinRange = compareVersions(parsedValue, minVersion) >= 0 && compareVersions(parsedValue, maxVersion) <= 0\n      if (!isWithinRange) return { border: '1px solid red' }\n      if (!versions.some(x => x.value === value)) return { border: '1px solid yellow' }\n    }}\n  />\n\n}\n","export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n","import { useEffect, useState } from 'react';\nimport { isBrowser } from './misc/util';\nvar useMedia = function (query, defaultState) {\n    if (defaultState === void 0) { defaultState = false; }\n    var _a = useState(isBrowser ? function () { return window.matchMedia(query).matches; } : defaultState), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        var mounted = true;\n        var mql = window.matchMedia(query);\n        var onChange = function () {\n            if (!mounted) {\n                return;\n            }\n            setState(!!mql.matches);\n        };\n        mql.addListener(onChange);\n        setState(mql.matches);\n        return function () {\n            mounted = false;\n            mql.removeListener(onChange);\n        };\n    }, [query]);\n    return state;\n};\nexport default useMedia;\n","import { useMedia } from 'react-use'\n\nconst SMALL_SCREEN_MEDIA = '@media (max-width: 440px)'\nexport const useIsSmallWidth = () => {\n  return useMedia(SMALL_SCREEN_MEDIA.replace('@media ', ''))\n}\n","import React from 'react'\nimport Screen from './Screen'\nimport Input from './Input'\nimport Button from './Button'\nimport SelectGameVersion from './SelectGameVersion'\nimport { useIsSmallWidth } from './simpleHooks'\n\nexport interface BaseServerInfo {\n  ip: string\n  name?: string\n  versionOverride?: string\n  proxyOverride?: string\n  usernameOverride?: string\n  /** Username or always use new if true */\n  authenticatedAccountOverride?: string | true\n}\n\ninterface Props {\n  onBack: () => void\n  onConfirm: (info: BaseServerInfo) => void\n  title?: string\n  initialData?: BaseServerInfo\n  parseQs?: boolean\n  onQsConnect?: (server: BaseServerInfo) => void\n  defaults?: Pick<BaseServerInfo, 'proxyOverride' | 'usernameOverride'>\n  accounts?: string[]\n  authenticatedAccounts?: number\n  versions?: string[]\n}\n\nconst ELEMENTS_WIDTH = 190\n\nexport default ({ onBack, onConfirm, title = 'Add a Server', initialData, parseQs, onQsConnect, defaults, accounts, versions, authenticatedAccounts }: Props) => {\n  const qsParams = parseQs ? new URLSearchParams(window.location.search) : undefined\n  const qsParamName = qsParams?.get('name')\n  const qsParamIp = qsParams?.get('ip')\n  const qsParamVersion = qsParams?.get('version')\n  const qsParamProxy = qsParams?.get('proxy')\n  const qsParamUsername = qsParams?.get('username')\n  const qsParamLockConnect = qsParams?.get('lockConnect')\n\n  const qsIpParts = qsParamIp?.split(':')\n  const ipParts = initialData?.ip.split(':')\n\n  const [serverName, setServerName] = React.useState(initialData?.name ?? qsParamName ?? '')\n  const [serverIp, setServerIp] = React.useState(ipParts?.[0] ?? qsIpParts?.[0] ?? '')\n  const [serverPort, setServerPort] = React.useState(ipParts?.[1] ?? qsIpParts?.[1] ?? '')\n  const [versionOverride, setVersionOverride] = React.useState(initialData?.versionOverride ?? /* legacy */ initialData?.['version'] ?? qsParamVersion ?? '')\n  const [proxyOverride, setProxyOverride] = React.useState(initialData?.proxyOverride ?? qsParamProxy ?? '')\n  const [usernameOverride, setUsernameOverride] = React.useState(initialData?.usernameOverride ?? qsParamUsername ?? '')\n  const lockConnect = qsParamLockConnect === 'true'\n\n  const smallWidth = useIsSmallWidth()\n  const initialAccount = initialData?.authenticatedAccountOverride\n  const [accountIndex, setAccountIndex] = React.useState(initialAccount === true ? -2 : initialAccount ? (accounts?.includes(initialAccount) ? accounts.indexOf(initialAccount) : -2) : -1)\n\n  const freshAccount = accountIndex === -2\n  const noAccountSelected = accountIndex === -1\n  const authenticatedAccountOverride = noAccountSelected ? undefined : freshAccount ? true : accounts?.[accountIndex]\n\n  let ipFinal = serverIp.includes(':') ? serverIp : `${serverIp}:${serverPort}`\n  ipFinal = ipFinal.replace(/:$/, '')\n  const commonUseOptions: BaseServerInfo = {\n    name: serverName,\n    ip: ipFinal,\n    versionOverride: versionOverride || undefined,\n    proxyOverride: proxyOverride || undefined,\n    usernameOverride: usernameOverride || undefined,\n    authenticatedAccountOverride,\n  }\n\n  return <Screen title={qsParamIp ? 'Connect to Server' : title} backdrop>\n    <form\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%'\n      }}\n      onSubmit={(e) => {\n        e.preventDefault()\n        onConfirm(commonUseOptions)\n      }}\n    >\n      <div style={{\n        display: 'grid',\n        gap: 3,\n        gridTemplateColumns: smallWidth ? '1fr' : '1fr 1fr'\n      }}\n      >\n        {!lockConnect && <>\n          <div style={{ gridColumn: smallWidth ? '' : 'span 2', display: 'flex', justifyContent: 'center' }}>\n            <InputWithLabel label=\"Server Name\" value={serverName} onChange={({ target: { value } }) => setServerName(value)} placeholder='Defaults to IP' />\n          </div>\n        </>}\n        <InputWithLabel required label=\"Server IP\" value={serverIp} disabled={lockConnect && qsIpParts?.[0] !== null} onChange={({ target: { value } }) => setServerIp(value)} />\n        <InputWithLabel label=\"Server Port\" value={serverPort} disabled={lockConnect && qsIpParts?.[1] !== null} onChange={({ target: { value } }) => setServerPort(value)} placeholder='25565' />\n        <div style={{ gridColumn: smallWidth ? '' : 'span 2' }}>Overrides:</div>\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}>\n          <label style={{ fontSize: 12, marginBottom: 1, color: 'lightgray' }}>Version Override</label>\n          <SelectGameVersion\n            selected={{ value: versionOverride, label: versionOverride }}\n            versions={versions?.map(v => { return { value: v, label: v } }) ?? []}\n            onChange={(value) => {\n              setVersionOverride(value)\n            }}\n            placeholder=\"Optional, but recommended to specify\"\n            disabled={lockConnect && qsParamVersion !== null}\n          />\n        </div>\n\n        <InputWithLabel label=\"Proxy Override\" value={proxyOverride} disabled={lockConnect && qsParamProxy !== null} onChange={({ target: { value } }) => setProxyOverride(value)} placeholder={defaults?.proxyOverride} />\n        <InputWithLabel label=\"Username Override\" value={usernameOverride} disabled={!noAccountSelected || lockConnect && qsParamUsername !== null} onChange={({ target: { value } }) => setUsernameOverride(value)} placeholder={defaults?.usernameOverride} />\n        <label style={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n        >\n          <span style={{ fontSize: 12, marginBottom: 1, color: 'lightgray' }}>Account Override</span>\n          <select\n            onChange={({ target: { value } }) => setAccountIndex(Number(value))}\n            style={{\n              background: 'gray',\n              color: 'white',\n              height: 20,\n              fontSize: 13,\n            }}\n            defaultValue={initialAccount === true ? -2 : initialAccount === undefined ? -1 : (fallbackIfNotFound((accounts ?? []).indexOf(initialAccount)) ?? -2)}\n          >\n            <option value={-1}>Offline Account (Username)</option>\n            {accounts?.map((account, i) => <option key={i} value={i}>{account} (Logged In)</option>)}\n            <option value={-2}>Any other MS account</option>\n          </select>\n        </label>\n\n        {!lockConnect && <>\n          <ButtonWrapper onClick={() => {\n            onBack()\n          }}>Cancel</ButtonWrapper>\n          <ButtonWrapper type='submit'>Save</ButtonWrapper>\n        </>}\n        {qsParamIp && <div style={{ gridColumn: smallWidth ? '' : 'span 2', display: 'flex', justifyContent: 'center' }}>\n          <ButtonWrapper\n            data-test-id='connect-qs'\n            onClick={() => {\n              onQsConnect?.(commonUseOptions)\n            }}\n          >Connect</ButtonWrapper>\n        </div>}\n      </div>\n    </form>\n  </Screen>\n}\n\nconst ButtonWrapper = ({ ...props }: React.ComponentProps<typeof Button>) => {\n  props.style ??= {}\n  props.style.width = ELEMENTS_WIDTH\n  return <Button {...props} />\n}\n\nconst InputWithLabel = ({ label, span, ...props }: React.ComponentProps<typeof Input> & { label, span? }) => {\n  return <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    gridRow: span ? 'span 2 / span 2' : undefined,\n  }}\n  >\n    <label style={{ fontSize: 12, marginBottom: 1, color: 'lightgray' }}>{label}</label>\n    <Input rootStyles={{ width: ELEMENTS_WIDTH }} {...props} />\n  </div>\n}\n\nconst fallbackIfNotFound = (index: number) => (index === -1 ? undefined : index)\n","import React from 'react'\nimport Singleplayer from './Singleplayer'\nimport Input from './Input'\nimport Button from './Button'\nimport PixelartIcon from './PixelartIcon'\nimport Select from './Select'\nimport { BaseServerInfo } from './AddServerOrConnect'\n\ninterface Props extends React.ComponentProps<typeof Singleplayer> {\n  joinServer: (info: BaseServerInfo, additional: {\n    shouldSave?: boolean\n    index?: number\n  }) => void\n  initialProxies: SavedProxiesLocalStorage\n  updateProxies: (proxies: SavedProxiesLocalStorage) => void\n  username: string\n  setUsername: (username: string) => void\n  onProfileClick?: () => void\n}\n\nexport interface SavedProxiesLocalStorage {\n  proxies: readonly string[]\n  selected: string\n}\n\ntype ProxyStatusResult = {\n  time: number\n  ping: number\n  status: 'success' | 'error' | 'unknown'\n}\n\nexport default ({ initialProxies, updateProxies: updateProxiesProp, joinServer, username, setUsername, onProfileClick, ...props }: Props) => {\n  const [proxies, setProxies] = React.useState(initialProxies)\n\n  const updateProxies = (newData: SavedProxiesLocalStorage) => {\n    setProxies(newData)\n    updateProxiesProp(newData)\n  }\n\n  const [serverIp, setServerIp] = React.useState('')\n  const [save, setSave] = React.useState(true)\n\n  return <Singleplayer\n    {...props}\n    firstRowChildrenOverride={<form\n      style={{ width: '100%', display: 'flex', justifyContent: 'center' }} onSubmit={(e) => {\n        e.preventDefault()\n        let ip = serverIp\n        let version\n        let msAuth = false\n        const parts = ip.split(':')\n        if (parts.at(-1) === 'ms') {\n          msAuth = true\n          parts.pop()\n        }\n        if (parts.length > 1 && parts.at(-1)!.includes('.')) {\n          version = parts.at(-1)!\n          ip = parts.slice(0, -1).join(':')\n        }\n        joinServer({\n          ip,\n          versionOverride: version,\n          authenticatedAccountOverride: msAuth ? true : undefined, // todo popup selector\n        }, {\n          shouldSave: save,\n        })\n      }}\n    >\n      <div style={{ display: 'flex', gap: 5, alignItems: 'center' }}>\n        {/* todo history */}\n        <Input required placeholder='Quick Connect IP (:version)' value={serverIp} onChange={({ target: { value } }) => setServerIp(value)} />\n        <label style={{ fontSize: 10, display: 'flex', alignItems: 'center', gap: 5, height: '100%', marginTop: '-1px' }}>\n          <input\n            type='checkbox' checked={save}\n            style={{ borderRadius: 0 }}\n            onChange={({ target: { checked } }) => setSave(checked)}\n          /> Save\n        </label>\n        <Button style={{ width: 90 }} type='submit'>Join Server</Button>\n      </div>\n    </form>}\n    searchRowChildrenOverride={\n      <div style={{\n        // marginTop: 12,\n      }}\n      >\n        <div style={{ display: 'flex', gap: 3, alignItems: 'center' }}>\n          <span style={{ color: 'lightgray', fontSize: 14 }}>Proxy:</span>\n          <Select\n            initialOptions={proxies.proxies.map(p => { return { value: p, label: p } })}\n            defaultValue={{ value: proxies.selected, label: proxies.selected }}\n            updateOptions={(newSel) => {\n              updateProxies({ proxies: [...proxies.proxies], selected: newSel })\n            }}\n\n          />\n          <PixelartIcon iconName='user' styles={{ fontSize: 14, color: 'lightgray', marginLeft: 2 }} onClick={onProfileClick} />\n          <Input rootStyles={{ width: 80 }} value={username} onChange={({ target: { value } }) => setUsername(value)} />\n        </div>\n      </div>\n    }\n    serversLayout\n    onWorldAction={(action, serverName) => {\n      if (action === 'load') {\n        joinServer({\n          ip: serverName,\n        }, {})\n      }\n      props.onWorldAction?.(action, serverName)\n    }}\n  />\n}\n\n"],"names":["SelectGameVersion$1","versions","selected","onChange","updateOptions","containerStyle","jsx","Select","newSel","value","parsedsupportedVersions","x","parsedValue","compareVersions","v1","v2","i","num1","num2","minVersion","maxVersion","isBrowser","useMedia","query","defaultState","_a","useState","state","setState","useEffect","mounted","mql","useMedia$1","SMALL_SCREEN_MEDIA","useIsSmallWidth","ELEMENTS_WIDTH","AddServerOrConnect$1","onBack","onConfirm","title","initialData","parseQs","onQsConnect","defaults","accounts","authenticatedAccounts","qsParams","qsParamName","qsParamIp","qsParamVersion","qsParamProxy","qsParamUsername","qsParamLockConnect","qsIpParts","ipParts","serverName","setServerName","React","serverIp","setServerIp","serverPort","setServerPort","versionOverride","setVersionOverride","proxyOverride","setProxyOverride","usernameOverride","setUsernameOverride","lockConnect","smallWidth","initialAccount","accountIndex","setAccountIndex","freshAccount","noAccountSelected","authenticatedAccountOverride","ipFinal","commonUseOptions","Screen","e","jsxs","Fragment","InputWithLabel","SelectGameVersion","v","fallbackIfNotFound","account","ButtonWrapper","props","Button","label","span","Input","index","ServersList$1","initialProxies","updateProxiesProp","joinServer","username","setUsername","onProfileClick","proxies","setProxies","updateProxies","newData","save","setSave","Singleplayer","ip","version","msAuth","parts","checked","p","PixelartIcon","action"],"mappings":"ioBAKA,MAAAA,GAAA,CAAA,CAAA,SAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,cAAAC,EAAA,eAAAC,CAAA,IASEC,EAAOC,EAAC,CAAA,eAAAN,EACU,aAAAC,EACF,cAAAM,GAAA,CAEZJ,GAAA,MAAAA,EAAAI,EAAsB,EACxB,cAAAL,EACe,eAAAE,GAAA,CAAA,MAAA,OAAA,EACoC,cAAAI,GAAA,CAEjD,GAAA,CAAAR,GAAA,CAAAQ,EAAyB,MAAA,GACzB,MAAAC,EAAAT,EAAA,IAAAU,GAAAA,EAAA,MAAA,MAAA,GAAA,EAAA,IAAA,MAAA,CAAA,EACAC,EAAAH,EAAA,MAAA,GAAA,EAAA,IAAA,MAAA,EAEAI,EAAA,CAAAC,EAAAC,IAAA,CACE,QAAAC,EAAA,EAAAA,EAAA,KAAA,IAAAF,EAAA,OAAAC,EAAA,MAAA,EAAAC,IAAA,CACE,MAAAC,EAAAH,EAAAE,CAAA,GAAA,EACAE,EAAAH,EAAAC,CAAA,GAAA,EACA,GAAAC,EAAAC,EAAiB,MAAA,GACjB,GAAAD,EAAAC,EAAiB,MAAA,EAAO,CAE1B,MAAA,EAAO,EAGTR,EAAA,KAAAG,CAAA,EACA,MAAAM,EAAAT,EAAA,CAAA,EACAU,EAAAV,EAAA,GAAA,EAAA,EAGA,GAAA,EADAG,EAAAD,EAAAO,CAAA,GAAA,GAAAN,EAAAD,EAAAQ,CAAA,GAAA,GACoB,MAAA,CAAA,OAAA,iBACpB,GAAA,CAAAnB,EAAA,KAAAU,GAAAA,EAAA,QAAAF,CAAA,EAA4C,MAAA,CAAA,OAAA,mBAAoC,CAClF,CAAA,o3BCzBG,IAAIY,GAAY,OAAO,OAAW,ICjBrCC,GAAW,SAAUC,EAAOC,EAAc,CACtCA,IAAiB,SAAUA,EAAe,IAC9C,IAAIC,EAAKC,EAAQ,SAACL,GAAY,UAAY,CAAE,OAAO,OAAO,WAAWE,CAAK,EAAE,OAAQ,EAAKC,CAAY,EAAGG,EAAQF,EAAG,CAAC,EAAGG,EAAWH,EAAG,CAAC,EACtII,OAAAA,EAAAA,UAAU,UAAY,CAClB,IAAIC,EAAU,GACVC,EAAM,OAAO,WAAWR,CAAK,EAC7BpB,EAAW,UAAY,CAClB2B,GAGLF,EAAS,CAAC,CAACG,EAAI,OAAO,CAClC,EACQ,OAAAA,EAAI,YAAY5B,CAAQ,EACxByB,EAASG,EAAI,OAAO,EACb,UAAY,CACfD,EAAU,GACVC,EAAI,eAAe5B,CAAQ,CACvC,CACA,EAAO,CAACoB,CAAK,CAAC,EACHI,CACX,EACA,MAAAK,GAAeV,GCrBTW,GAAqB,4BACdC,GAAkB,IACtBZ,GAASW,GAAmB,QAAQ,UAAW,EAAE,CAAC,EC0B3DE,EAAA,IAEAC,GAAA,CAAA,CAAA,OAAAC,EAAA,UAAAC,EAAA,MAAAC,EAAA,eAAA,YAAAC,EAAA,QAAAC,EAAA,YAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,SAAA3C,EAAA,sBAAA4C,CAAA,IAAA,CACE,MAAAC,EAAAL,EAAA,IAAA,gBAAA,OAAA,SAAA,MAAA,EAAA,OACAM,EAAAD,GAAA,YAAAA,EAAA,IAAA,QACAE,EAAAF,GAAA,YAAAA,EAAA,IAAA,MACAG,EAAAH,GAAA,YAAAA,EAAA,IAAA,WACAI,EAAAJ,GAAA,YAAAA,EAAA,IAAA,SACAK,EAAAL,GAAA,YAAAA,EAAA,IAAA,YACAM,EAAAN,GAAA,YAAAA,EAAA,IAAA,eAEAO,EAAAL,GAAA,YAAAA,EAAA,MAAA,KACAM,EAAAd,GAAA,YAAAA,EAAA,GAAA,MAAA,KAEA,CAAAe,EAAAC,CAAA,EAAAC,EAAA,UAAAjB,GAAA,YAAAA,EAAA,OAAAO,GAAA,EAAA,EACA,CAAAW,EAAAC,CAAA,EAAAF,EAAA,UAAAH,GAAA,YAAAA,EAAA,MAAAD,GAAA,YAAAA,EAAA,KAAA,EAAA,EACA,CAAAO,EAAAC,CAAA,EAAAJ,EAAA,UAAAH,GAAA,YAAAA,EAAA,MAAAD,GAAA,YAAAA,EAAA,KAAA,EAAA,EACA,CAAAS,EAAAC,CAAA,EAAAN,EAAA,UAAAjB,GAAA,YAAAA,EAAA,mBAA0EA,GAAA,YAAAA,EAAA,UAAAS,GAAA,EAAA,EAC1E,CAAAe,EAAAC,EAAA,EAAAR,EAAA,UAAAjB,GAAA,YAAAA,EAAA,gBAAAU,GAAA,EAAA,EACA,CAAAgB,EAAAC,EAAA,EAAAV,EAAA,UAAAjB,GAAA,YAAAA,EAAA,mBAAAW,GAAA,EAAA,EACAiB,EAAAhB,IAAA,OAEAiB,EAAAnC,KACAoC,EAAA9B,GAAA,YAAAA,EAAA,6BACA,CAAA+B,EAAAC,EAAA,EAAAf,EAAA,SAAAa,IAAA,GAAA,GAAAA,EAAA1B,GAAA,MAAAA,EAAA,SAAA0B,GAAA1B,EAAA,QAAA0B,CAAA,EAAA,GAAA,EAAA,EAEAG,GAAAF,IAAA,GACAG,EAAAH,IAAA,GACAI,GAAAD,EAAA,OAAAD,GAAA,GAAA7B,GAAA,YAAAA,EAAA2B,GAEA,IAAAK,EAAAlB,EAAA,SAAA,GAAA,EAAAA,EAAA,GAAAA,CAAA,IAAAE,CAAA,GACAgB,EAAAA,EAAA,QAAA,KAAA,EAAA,EACA,MAAAC,EAAA,CAAyC,KAAAtB,EACjC,GAAAqB,EACF,gBAAAd,GAAA,OACgC,cAAAE,GAAA,OACJ,iBAAAE,GAAA,OACM,6BAAAS,EACtC,EAGF,OAAArE,EAAAwE,GAAA,CAAA,MAAA9B,EAAA,oBAAAT,EAAA,SAAA,GAAA,SAAAjC,EACE,OAAC,CAAA,MAAA,CACQ,QAAA,OACI,cAAA,SACM,OAAA,MACP,EACV,SAAAyE,GAAA,CAEEA,EAAA,eAAA,EACAzC,EAAAuC,CAAA,CAA0B,EAC5B,SAAAG,EAEA,MAAC,CAAA,MAAA,CAAW,QAAA,OACD,IAAA,EACJ,oBAAAX,EAAA,MAAA,SACqC,EAC5C,SAAA,CAEG,CAAAD,GAAA9D,EAAA2E,EAAA,CAAA,SAAA3E,EAAA,MAAA,CAAA,MAAA,CAAA,WAAA+D,EAAA,GAAA,SAAA,QAAA,OAAA,eAAA,QAAA,EAAA,SAAA/D,EAAA4E,EAAA,CAAA,MAAA,cAAA,MAAA3B,EAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAA9C,EAAA,IAAA+C,EAAA/C,CAAA,EAAA,YAAA,gBAAA,CAAA,CAAA,CAAA,EAAA,EAIDH,EAAA4E,EAAA,CAAA,SAAA,GAAA,MAAA,YAAA,MAAAxB,EAAA,SAAAU,IAAAf,GAAA,YAAAA,EAAA,MAAA,KAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAA5C,CAAA,KAAAkD,EAAAlD,CAAA,EAAA,EACuKH,EAAA4E,EAAA,CAAA,MAAA,cAAA,MAAAtB,EAAA,SAAAQ,IAAAf,GAAA,YAAAA,EAAA,MAAA,KAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAA5C,CAAA,CAAA,IAAAoD,EAAApD,CAAA,EAAA,YAAA,QAAA,EACiBH,EAAA,MAAA,CAAA,MAAA,CAAA,WAAA+D,EAAA,GAAA,QAAA,EAAA,SAAA,YAAA,CAAA,EACtHW,EAAA,MAAA,CAAA,MAAA,CACtD,QAAA,OACD,cAAA,QACM,EAAA,SAAA,CAEf1E,EAAA,QAAA,CAAA,MAAA,CAAA,SAAA,GAAA,aAAA,EAAA,MAAA,WAAA,EAAA,SAAA,kBAAA,CAAA,EAAqFA,EACrF6E,GAAC,CAAA,SAAA,CAAA,MAAArB,EAAA,MAAAA,CAAA,EAC4D,UAAA7D,GAAA,YAAAA,EAAA,IAAAmF,IAC5B,CAAA,MAAAA,EAAA,MAAAA,CAAA,MAA4B,CAAA,EAAS,SAAA3E,GAAA,CAElEsD,EAAAtD,CAAA,CAAwB,EAC1B,YAAA,uCACY,SAAA2D,GAAAnB,IAAA,IACgC,CAAA,CAC9C,EAAA,EACF3C,EAAA4E,EAAA,CAAA,MAAA,iBAAA,MAAAlB,EAAA,SAAAI,GAAAlB,IAAA,KAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAzC,CAAA,KAAAwD,GAAAxD,CAAA,EAAA,YAAAkC,GAAA,YAAAA,EAAA,cAAA,EAEiNrC,EAAA4E,EAAA,CAAA,MAAA,oBAAA,MAAAhB,EAAA,SAAA,CAAAQ,GAAAN,GAAAjB,IAAA,KAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAA1C,EAAA,IAAA0D,GAAA1D,CAAA,EAAA,YAAAkC,GAAA,YAAAA,EAAA,gBAAA,CAAA,EACqCqC,EACtP,QAAC,CAAA,MAAA,CAAa,QAAA,OACH,cAAA,QACM,EACjB,SAAA,CAEE1E,EAAA,OAAA,CAAA,MAAA,CAAA,SAAA,GAAA,aAAA,EAAA,MAAA,WAAA,EAAA,SAAA,kBAAA,CAAA,EAAoF0E,EACpF,SAAC,CAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAvE,CAAA,CAAA,IAAA+D,GAAA,OAAA/D,CAAA,CAAA,EACmE,MAAA,CAC3D,WAAA,OACO,MAAA,QACL,OAAA,GACC,SAAA,EACE,EACZ,aAAA6D,IAAA,GAAA,GAAAA,IAAA,OAAA,GAAAe,IAAAzC,GAAA,CAAA,GAAA,QAAA0B,CAAA,CAAA,GAAA,GACkJ,SAAA,CAElJhE,EAAA,SAAA,CAAA,MAAA,GAAA,SAAA,6BAAA,EAA6CsC,GAAA,YAAAA,EAAA,IAAA,CAAA0C,EAAAtE,IAAAgE,EAAA,SAAA,CAAA,MAAAhE,EAAA,SAAA,CACasE,EAAA,cAAQ,CAAA,EAAAtE,CAAA,GAAqBV,EAAA,SAAA,CAAA,MAAA,GAAA,SAAA,uBAAA,CAChD,CAAA,CAAA,CACzC,CAAA,CAAA,EACF,CAAA8D,GAAAY,EAAAC,EAAA,CAAA,SAAA,CAGE3E,EAAAiF,EAAA,CAAA,QAAA,IAAA,CACElD,GAAO,EAAA,SAAA,SAAA,EACA/B,EAAAiF,EAAA,CAAA,KAAA,SAAA,SAAA,OAAA,CACwB,EAAA,EACnCvC,GAAA1C,EAAA,MAAA,CAAA,MAAA,CAAA,WAAA+D,EAAA,GAAA,SAAA,QAAA,OAAA,eAAA,QAAA,EAAA,SAAA/D,EAEEiF,EAAC,CAAA,eAAA,aACc,QAAA,IAAA,CAEX7C,GAAA,MAAAA,EAAAmC,EAA8B,EAChC,SAAA,SACD,CAAA,EAAA,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAGN,EAEAU,EAAA,CAAA,CAAA,GAAAC,MACEA,EAAA,QAAAA,EAAA,MAAA,IACAA,EAAA,MAAA,MAAArD,EACA7B,EAAAmF,EAAA,CAAA,GAAAD,CAAA,CAAA,GAGFN,EAAA,CAAA,CAAA,MAAAQ,EAAA,KAAAC,EAAA,GAAAH,CAAA,IACER,EAAO,MAAC,CAAA,MAAA,CAAW,QAAA,OACR,cAAA,SACM,QAAAW,EAAA,kBAAA,MACqB,EACtC,SAAA,CAEErF,EAAA,QAAA,CAAA,MAAA,CAAA,SAAA,GAAA,aAAA,EAAA,MAAA,WAAA,EAAA,SAAAoF,CAAA,CAAA,EAA4EpF,EAAAsF,EAAA,CAAA,WAAA,CAAA,MAAAzD,CAAA,EAAA,GAAAqD,EAAA,CACnB,CAAA,CAAA,EAI7DH,GAAAQ,GAAAA,IAAA,GAAA,OAAAA,ktCC/IA,MAAAC,EAAA,CAAA,CAAA,eAAAC,EAAA,cAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,YAAAC,EAAA,eAAAC,EAAA,GAAAZ,KAAA,CACE,KAAA,CAAAa,EAAAC,CAAA,EAAA7C,EAAA,SAAAsC,CAAA,EAEAQ,EAAAC,GAAA,CACEF,EAAAE,CAAA,EACAR,EAAAQ,CAAA,CAAyB,EAG3B,CAAA9C,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EACA,CAAAgD,EAAAC,CAAA,EAAAjD,EAAA,SAAA,EAAA,EAEA,OAAAnD,EAAOqG,GAAC,CAAA,GAAAnB,EACF,yBAAAlF,EACsB,OAAC,CAAA,MAAA,CAAA,MAAA,OAAA,QAAA,OAAA,eAAA,QAAA,EACyC,SAAAyE,GAAA,CAChEA,EAAA,eAAA,EACA,IAAA6B,EAAAlD,EACAmD,EACAC,EAAA,GACA,MAAAC,EAAAH,EAAA,MAAA,GAAA,EACAG,EAAA,GAAA,EAAA,IAAA,OACED,EAAA,GACAC,EAAA,IAAA,GAEFA,EAAA,OAAA,GAAAA,EAAA,GAAA,EAAA,EAAA,SAAA,GAAA,IACEF,EAAAE,EAAA,GAAA,EAAA,EACAH,EAAAG,EAAA,MAAA,EAAA,EAAA,EAAA,KAAA,GAAA,GAEFd,EAAA,CAAW,GAAAW,EACT,gBAAAC,EACiB,6BAAAC,EAAA,GAAA,MAC6B,EAAA,CAC7C,WAAAL,CACW,CAAA,CACb,EACH,SAAAzB,EAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,IAAA,EAAA,WAAA,QAAA,EAAA,SAAA,CAIE1E,EAAAsF,EAAA,CAAA,SAAA,GAAA,YAAA,8BAAA,MAAAlC,EAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAjD,CAAA,CAAA,IAAAkD,EAAAlD,CAAA,EAAA,EAAoIuE,EAAA,QAAA,CAAA,MAAA,CAAA,SAAA,GAAA,QAAA,OAAA,WAAA,SAAA,IAAA,EAAA,OAAA,OAAA,UAAA,MAAA,EAAA,SAAA,CAElI1E,EAAA,QAAC,CAAA,KAAA,WACM,QAAAmG,EAAoB,MAAA,CAAA,aAAA,CAAA,EACA,SAAA,CAAA,CAAA,OAAA,CAAA,QAAAO,CAAA,CAAA,IAAAN,EAAAM,CAAA,CAC6B,CAAA,EACxD,OAAE,EAAA,EACJ1G,EAAAmF,EAAA,CAAA,MAAA,CAAA,MAAA,EAAA,EAAA,KAAA,SAAA,SAAA,aAAA,CAAA,CACuD,EAAA,CACzD,CAAA,EACF,0BAAAnF,EAEE,MAAC,CAAA,MAAA,CAAW,EAEZ,SAAA0E,EAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,IAAA,EAAA,WAAA,QAAA,EAAA,SAAA,CAGI1E,EAAA,OAAA,CAAA,MAAA,CAAA,MAAA,YAAA,SAAA,EAAA,EAAA,SAAA,QAAA,CAAA,EAAyDA,EACzDC,EAAC,CAAA,eAAA8F,EAAA,QAAA,IAAAY,IAC4C,CAAA,MAAAA,EAAA,MAAAA,CAAA,EAA4B,EAAG,aAAA,CAAA,MAAAZ,EAAA,SAAA,MAAAA,EAAA,QAAA,EACT,cAAA7F,GAAA,CAE/D+F,EAAA,CAAA,QAAA,CAAA,GAAAF,EAAA,OAAA,EAAA,SAAA7F,CAAA,CAAA,CAAiE,CACnE,CAAA,EAEFF,EAAA4G,GAAA,CAAA,SAAA,OAAA,OAAA,CAAA,SAAA,GAAA,MAAA,YAAA,WAAA,CAAA,EAAA,QAAAd,EAAA,EACoH9F,EAAAsF,EAAA,CAAA,WAAA,CAAA,MAAA,EAAA,EAAA,MAAAM,EAAA,SAAA,CAAA,CAAA,OAAA,CAAA,MAAAzF,CAAA,CAAA,IAAA0F,EAAA1F,CAAA,EAAA,CACR,EAAA,CAC9G,CAAA,EACF,cAAA,GAEW,cAAA,CAAA0G,EAAA5D,IAAA,OAEX4D,IAAA,QACElB,EAAA,CAAW,GAAA1C,CACL,EAAA,CAAA,CAAA,GAGR9B,EAAA+D,EAAA,gBAAA,MAAA/D,EAAA,KAAA+D,EAAA2B,EAAA5D,EAAwC,CAC1C,CAAA,CAEJ;;","x_google_ignoreList":[1,2]}